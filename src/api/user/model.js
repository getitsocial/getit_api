import randtoken from 'rand-token'
import mongoose, { Schema } from 'mongoose'
import { isEmail } from 'validator'
import { isEmpty } from 'lodash'
import { hashPassword, passwordValidator } from '~/utils'
import { sendDynamicMail } from '~/services/sendgrid'
import { serverConfig } from '~/config'

const { emailTemplates } = serverConfig

const roles = ['user', 'admin']

const userSchema = new Schema({
    email: {
        type: String,
        validate: isEmail,
        required: true,
        unique: true,
        trim: true,
        lowercase: true
    },
    password: {
        type: String,
        required: true,
        validate: passwordValidator,
        minlength: 6
    },
    name: {
        type: String,
        index: true,
        trim: true
    },
    services: {
        facebook: String,
        github: String,
        google: String
    },
    role: {
        type: String,
        enum: roles,
        default: 'user'
    },
    picture: {
        id: {
            type: String,
        },
        url: {
            type: String,
            required: true
        },
    },
    shops: [{ 
        type: Schema.Types.ObjectId, 
        ref: 'Shop',
    }],
    activeShop: {
        type: Schema.Types.ObjectId,
        ref: 'Shop'
    },
    location: {
        type: Object
    },
    description: {
        type: String,
        required: false,
        maxlength: 2000
    },
}, {
    timestamps: true,
    toJSON: {
        virtuals: true
    },
    toObject: {
        virtuals: true
    }
})

// Set initial user picture generated by email
userSchema.path('email').set(function (email) {   
    if (!this.name)
        this.name = email.replace(/^(.+)@.+$/, '$1')
    
    return email
})

// Set user picture on update generated by email
userSchema.pre('save', function (next) {
    if (this.isModified('picture') && isEmpty(this.picture))
        this.picture = {
            url: 'https://res.cloudinary.com/hd0qf9g6w/image/upload/v1587732294/placeholder/placeholder.png',
            id: 'placeholder/placeholder'
        }
    next()
})

// Catch key error
userSchema.post('save', function (error, document, next) {
    next( error?.code === 11000 ? 'Diese E-Mail Adresse existiert bereits.' : error)
})

// Hash password if changed
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next()

    /* istanbul ignore next */
    try {
        this.password = await hashPassword(this.password)
        next()
    } catch(error) {
        next(error)
    }

})


export const modelProjection = function(req, item = this, cb) {
    
    const view = {}
    const fields = ['_id', 'name', 'email', 'picture', 'role', 'userSettings', 'createdAt', 'location', 'description']

    fields.forEach((field) => { view[field] = item[field] })
    
    if(!cb)
        return view

    cb(null, view)
    
}

userSchema.statics = {
    roles,
    async createFromService ({ service, id, email, name, picture }) {
        const user = await this.findOne({ $or: [{ [`services.${service}`]: id }, { email }] })
        if (user) {
            user.services[service] = id
            user.name = name
            user.picture = picture
            return user.save()
        } else {
            const password = randtoken.generate(32, 'aA1!&bB2ยง/cC3$(dD4%)')
            const newUser =  this.create({ services: { [service]: id }, email, password, name, picture })

            if (process.env.NODE_ENV === 'prod') {
                // Send welcome Mail
                await sendDynamicMail({ toEmail: email,
                    templateId: emailTemplates.welcome,
                    dynamic_template_data: {
                        username: name
                    }
                })
            }

            return newUser
        }
    }
}

userSchema.methods = {
    modelProjection
}

userSchema.index({'$**': 'text'})

export default mongoose.model('User', userSchema)